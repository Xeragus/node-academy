Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


Lecture 1: Understanding Node.js

A.1: The Basics (20 min)

Free open source server environment
Runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Uses JavaScript on the server
Uses asynchronous programming
Example: PHP vs Node.js
PHP will:
Send the task to to the computer’s file system
Waits while the file system opens and reads the file
Returns the content to the client
Ready to handle the next request
Node.js will:
Send the task to the computer’s file system
Ready to handle the next request
When the file system has opened and read the file, the server returns the content to the client
Node.js eliminates the waiting and simply continues with the next request
Can create, open, read, write, delete and close files on the server
Can collect form data
Can add, delete, modify data in your database
Client server model
A.2: Comparison operators (25 min)

== equal to
=== equal value and equal type
!= not equal
!== not equal value and equal type
> greater than
< less than
>= greater than or equal to
<= less than or equal to
Break 1 (15 min)
B.1: Variables (45 min)

Containers for storing data, just like in algebra
Variables must be identified with unique names (identifiers)
There are general rules for constructing variable names
The assignment operator
Dynamic data types: String, Number, Boolean, Array, Object, Undefined
typeof operator (typeof “string”)
Null (null is an object) vs empty value
Undefined and null are equal in value but different in type
Var vs let (more)
Const (more)t
C.1: Functions (45 min)
A block of code designed to perform a particular task
Is executed when something invokes it
Example: Fahrenheit to Celsius
The syntax: old style vs new style
Function used as variable values
Scope
Local
Global
Automatically global
Break 2 (15 min)
D.1: Conditional statements (20 min)

If
Else
Else if
Switch 
D.2: Loops (25 min)

For loop
For/in loop (loop through the properties of an object)
For/of loop (loop through the values of an iterable objects)
While loop
Break statement, Continue statement
Extra: Modules (15 min)



























Lecture 2: Node.js Fundamentals

JSON (15 min)
JavaScript Object Notation
Standard format used to transfer data over the network
The JSON global
Stringify
parse
Important Globals (10 min)
Console
Timers
setTimeout
setInterval
__filename and __dirname
Process
Anonymous Functions, First-Class Functions, Higher-Order Functions (10 min)
Anonymous functions are functions without a name
Ex: write an anonymous function
First-class functions are functions that can be treated like any other variable - in JS all functions are first-class functions
Higher-order functions are functions that take functions as arguments
Ex: setTimeout
Closures (10 min)
The variables in the outer function has been closed by the inner function
The inner function can access the variables from the outer scope even after the outer function has returned (page 22/23 book)
Promises (15 min)
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value
A promise can be in 3 states:
Pending
Fulfilled
Rejected
How to use promises
How to create promises

Error handling (15 min)
Exception handling mechanism

Break (15 min after 1h 15 min)
Modules (15 min)
Each file is its own module
Each file has access to the current module definition using the module variable
The export of the current module is determined by the module.exports variable
To import a module use the globally available require function
The require function is the main way of importing a module into the current file
Types of modules in in Node.js:
File-based
Core
External
Core Modules (30 min)
Path module
Fs module
Os module
Util module



Lecture 3: Node.js Fundamentals pt.2

NPM (30 min)
How to install, uninstall, list dependencies
Package.json
Semantic versioning
Major versions
Minor versions
Path versions
X.Y.Z

Events (30 min)
What are classes and OOP?
Subscribe/unsubscribe to events

Streams (30 min)
Streams are a way to handle reading/writing files, network communications or any kind of end-to-end information exchange in an efficient way
Instead of a program reading a file into memory all at once, streams read chunks of data piece by piece, processing its content without keeping it all into memory
Two major advantages to other data handling methods:
Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it
Time efficiency: it takes significantly less time to start processing data as soon as you have it, rather than having to wait with processing until the entire payload has been transmitted
4 types of streams in Node.js:
Writable: streams to which we can write data (fs.createWriteStream() lets us write data to a file using streams)
Readable: streams from which data can be read. For example: fs.createReadStream() lets us read the contents of a file.
Duplex: streams that are both Readable and Writable
Transform: streams that can modify or transform the data as it is written and read (file comppression)


